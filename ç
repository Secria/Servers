package attachment

import (
	"context"
	"io"
	"net/http"
	"shared/mongo_schemes"

	"github.com/minio/minio-go/v7"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
)

func DownloadAttachment(client *minio.Client, email_collection *mongo.Collection, bucket string) http.HandlerFunc {
    return func(w http.ResponseWriter, r *http.Request) {
        email_id := r.URL.Query().Get("id")
        ref := r.URL.Query().Get("ref")
        if ref == "" || email_id == "" {
            http.Error(w, "Bad parameters", http.StatusBadRequest)
            return
        }

        id, err := primitive.ObjectIDFromHex(email_id)
        if err != nil {
            http.Error(w, "Bad id", http.StatusBadRequest)
            return
        }

        filter := bson.D{{Key: "_id", Value: id}}

        var email mongo_schemes.Email
        if err := email_collection.FindOne(context.TODO(), filter).Decode(&email); err != nil {
            http.Error(w, "Server error", http.StatusInternalServerError)
            return
        }

        var attachment mongo_schemes.Attachment
        found := false
        for _, a := range email.Attachments {
            if ref == a.Reference {
                found = true
                attachment = a
                break
            }
        }

        if !found {
            http.Error(w, "Bad request", http.StatusBadRequest)
            return
        }

        res, err := client.GetObject(context.TODO(), bucket, ref, minio.GetObjectOptions{})
        if err != nil {
            http.Error(w, "Server error", http.StatusInternalServerError)
            return
        }
        w.Header().Set("Content-Type", attachment.ContentType)
        io.Copy(w, res)
    }
}
